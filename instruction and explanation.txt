Solution:
After some analization of the main page of Viki.com, I have some observation:
	- Almost all elements (video, celebritie entities) are render at server (it mean not dynamically generated in the client side by Javascript).
	- A lot of dynamic elements (tooltips) have all theirs data link in the static html and can be retrieved easily by a GET request.
	- Specific element like "recentWatch" is dynamically generated by JS base on local storage/ip address so this cannot be retrieve anyway from static html without running javascript of the page.
	- All entities can be identify by their url so that we can use url as the id for entities.
	- Each entity is under css class ".item" or ".c-item".

Therefore, we can scan through the HTML document from a GET request to "www.viki.com" and analyze it.
We try to retrieve an video url and/or a channel url and/or a celebrity url from each html element that have class ".item" or ".c-item". These html element can have multiple url of the same entity but we not count this as duplicate and take 1 url as the representative for the whole element.
After scan through all ".item" and ".c-item" elements, we have a list of url represnent each element. 1 element can have url of "video", "channel", and "celebrity" at the same time.
Now we simply compare all this representation url from all this block and conclude which entity is duplicated.

This solution is implemented in Javascript, run on NodeJS.
Use frameworks:	
	'request': to make http request to viki.com and tooltips json data
	'cheerio': to parse html document and enable jquery api
	'phantomJS': to simulate the browser and run javascript

================================================================
Why this solution is good:
	
This solution is good because it consider all cases of DOM change due to javascript.
It also optimal because only scan for a very small number of html elements base on specific css classes like ".item" and ".c-item" and still manage to remain the correctness.


================================================================
How to run the script?
- System requirement: 
	You must have Nodejs and npm installed
- Install PhantonJS globally:
	`npm install phantomjs -g`
- Then navigate to the project folder:
	`cd app`
- Install nessessary node packets:
	`npm install`
- Run the script:
	`node app.js`
- Now you will the the result of duplicated items report shown in the console.
	